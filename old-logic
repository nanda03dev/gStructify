

func AddNewLineToExistContent(newline, content, startKeyword, endKeyword, addToStartOfLine, addToEndOfLine string) string {

	if strings.Contains(content, newline) {
		return content // Line already exists, no modification needed
	}

	// Find the type Repository struct block and locate the closing bracket
	if idx := strings.Index(content, startKeyword); idx != -1 {
		// Find the closing curly bracket for the struct
		start := idx + len(startKeyword)
		end := strings.Index(content[start:], endKeyword)
		if end != -1 {
			// Insert the new repository line before the closing curly bracket
			insertPos := start + end
			content = content[:insertPos] + addToStartOfLine + newline + addToEndOfLine + content[insertPos:]
		}
	}

	return content
}

func AddNewLineToExistContent(newline, content, startKeyword, endKeyword, addToStartOfLine, addToEndOfLine string) string {

	// Use a regex to match the exact line, ignoring extra spaces or formatting
	newlineRegex := regexp.MustCompile(`\s*` + regexp.QuoteMeta(newline) + `\s*`)
	if newlineRegex.MatchString(content) {
		fmt.Println("New line already exists")
		return content // Line already exists, no modification needed
	}

	// Find the struct block using regex
	structRegex := regexp.MustCompile(`(?s)` + regexp.QuoteMeta(startKeyword) + `(.*?)` + regexp.QuoteMeta(endKeyword))
	matches := structRegex.FindStringSubmatchIndex(content)
	if matches != nil {
		// Insert the new line before the closing curly bracket
		endIdx := matches[3] // End of the block (just before the closing bracket)
		insertPos := endIdx - 1
		content = content[:insertPos] + addToStartOfLine + newline + addToEndOfLine + content[insertPos:]
	}

	return content
}